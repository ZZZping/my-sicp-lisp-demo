#lang sicp
;;Representations for Complex Numbers
;;Complex Numbers
(define (square x) (* x x))
;;(make-from-real-imag (real-part z) (imag-part z))
;;(make-from-mag-ang (magnitude z) (angle z))
(define (add-complex z1 z2)
  (make-from-real-imag (+ (real-part z1) (real-part z2))
                       (+ (imag-part z1) (imag-part z2))))
(define (sub-complex z1 z2)
  (make-from-real-imag (- (real-part z1) (real-part z2))
                       (- (imag-part z1) (imag-part z2))))
(define (mul-complex z1 z2)
  (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                     (+ (angle z1) (angle z2))))
(define (div-complex z1 z2)
  (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                     (- (angle z1) (angle z2))))
;;(define (real-part z) (car z))
;;(define (imag-part z) (cdr z))
;;(define (magnitude z)
;;  (sqrt (+ (square (real-part z))
;;           (square imag-part z))))
;;(define (angle z)
;;  (atan (imag-part z) (real-part z)))
;;(define (make-from-real-imag x y) (cons x y))
;;(define (make-from-mag-ang r a)
;;  (cons (* r (cos a)) (* r (sin a))))
(define (attach-tag type-tag contents)
  (cons type-tag contents))
(define (type-tag datum)
  (if (pair? datum) (car datum)
      (error "Bad tagged datum: type-tag" datum)))
(define (contents datum)
  (if (pair? datum)
      (cdr datum)
      (error "Bad contents datum: contents" datum)))
(define (rectangular? z)
  (eq? (type-tag z) 'rectangular))
(define (polar? z)
  (eq? (type-tag z) 'polar))
(define (real-part-rectangular z) (car z))
(define (imag-part-rectangular z) (cdr z))
(define (magnitude-rectangular z)
  (sqrt (+ (square (real-part-rectangular z))
           (square (imag-part-rectangular z)))))
(define (angle-rectangular z)
  (atan (imag-part-rectangular z)
        (real-part-rectangular z)))
(define (make-from-real-imag-rectangular x y)
  (attach-tag 'rectangular (cons x y)))
(define (make-from-mag-ang-rectangular r a)
  (attach-tag 'rectangular (cons (* r (cos a)) (* r (sin a)))))
(define (real-part-polar z) (* (magnitude-polar z) (cos (angle-polar z))))
(define (imag-part-polar z) (* (magnitude-polar z) (sin (angle-polar z))))
(define (magnitude-polar z) (car z))
(define (angle-polar z) (cdr z))
(define (make-from-real-imag-polar x y)
  (attach-tag 'polar
              (cons (sqrt (+ (square x) (square y))) (atan y))))
(define (make-from-mag-ang-polar r a)
  (attach-tag 'polar (cons r a)))
(define (real-part z)
  (cond ((rectangular? z) (real-part-rectangular (contents z)))
        ((polar? z) (real-part-polar (contents z)))
        (else (error "Unkonw type: REAL-PART" z))))
(define (imag-part z)
  (cond ((rectangular? z) (imag-part-rectangular (contents z)))
        ((polar? z) (imag-part-polar (contents z)))
        (else (error "Unknow type: IMAG-PART" z))))
(define (magnitude z)
  (cond ((rectangular? z) (magnitude-rectangular (contents z))))
        ((polar? z) (magnitude-polar (contents z)))
        (else (error "Unkonw type: MAGNITUDE" z))))
(define (angle z)
  (cond ((rectangular? z) (angle-rectangular (contents z)))
        ((polar? z) (angle-polar (contents z)))
        (else (error "Unknow type: ANGLE" z))))
(define (make-from-real-imag x y)
  (make-from-real-imag-rectangular x y))
(define (make-from-mag-ang r a)
  (make-from-mag-ang-polar r a))
(define no-pen (make-object pen% "BLACK" 1 'transparent'))
(define red-pen (make-object pen% "RED" 2 'solid'))
(define black-pen (make-object pen% "BLACK" 2 'solid'))
(define no-brush (make-object brush% "BLACK" 'transparent'))
(define yellow-brush (make-object brush% "YELLOW" 'solid'))
(define red-brush (make-object brush% "RED" 'solid'))

(define (draw-face dc)
  (define (draw-line start end)
    (define (draw-line-coef coef)
      (send dc draw-line (* coef (car start)) (* coef (cdr start)) (* coef (car end)) (* coef (cdr end))))
    (draw-line-coef 50))
  (define (make-segment a b c d)
    (list (cons (/ a 4.1) (/ b 4.1)) (cons (/ c 4.1) (/ d 4.1))))
  (define (start-segment segment)
    (car segment))
  (define (end-segment segment)
    (cdr segment)))
(define (segments->painter segment-list)
  (lambda (frame)
    (for-each
     (lambda (segment)
       (draw-line ((frame-coord-map frame) (start-segment segment))
                  ((frame-coord-map frame) (end-segment segment))))
     segment-list)))
(send dc set-smoothing 'smoothed)
(send sc set-pen black-pen)
#|

|#

(define (wave frame)
  ((segments->painter (list
                       (make-segment 0    0.7   0.6   1.7)
                       (make-segment 0.6  1.7   1.2   1.5)
                       (make-segment 1.2  1.5   1.6   1.5)
                       (make-segment 1.6  1.5   1.45  0.6)
                       (make-segment 1.45 0.6   1.6   0)

                       (make-segment 2.45 0     2.65  0.61)
                       (make-segment 2.65 0.61  2.5   1.45)
                       (make-segment 2.5  1.45  3.1   1.5)
                       (make-segment 3.1  1.5   4.1   2.7)

                       (make-segment 0    1.5   0.6   2.5)
                       (make-segment 0.6  2.5   1.2   1.7)
                       (make-segment 1.2  1.7   1.4   2.2)
                       (make-segment 1.4  2.2   1     4.1)

                       (make-segment 1.6  4.1   2.05  3)
                       (make-segment 2.05 3     2.4   4.1)

                       (make-segment 3.2  4.1   2.45  2.35)
                       (make-segment 2.45 2.35  4.1   3.5)
                       )) frame))

(define (beside left right)
  (lambda (frame)
    ((transform-painter left
                        (make-vect 0.0 0.0)
                        (make-vect 0.5 0.0)
                        (make-vect 0.0 1)) frame)
    ((transform-painter right
                        (make-vect 0.5 0.0)
                        (make-vect 1   0.0)
                        (make-vect 0.0 1)) frame)))
(define (below left right)
  (lambda (frame)
    ((transform-painter left
                        (make-vect 0.0 0.0)
                        (make-vect 1   0.0)
                        (make-vect 0.0 0.5)) frame)
    ((transform-painter right
                        (make-vect 0.0 0.5)
                        (make-vect 1   0.5)
                        (make-vect 0.0 1)) frame)))
(define wave2 (beside wave (flip-vert wave)))
(define wave4 (below wave wave2))
(define (right-split painter n)
  (if (= n 0) painter
      (let ((smaller (right-split painter (- n 1))))
        (beside painter (below smaller smaller)))))

(define (4-corner painter n)
  (beside (flip-horiz (below (flip-vert (corner-split painter n))
                             (corner-split painter n)))
          (below (flip-vert (corner-split painter n))
                 (corner-split painter n))))
(define myWindow (new frame% [label "example window"]
                      [width 300]
                      [height 300]))
(define myCanvas (new canvas%
                      [parent myWindow]
                      [paint-callback (lambda (canvas dc) (draw-face dc))]))
(send myWindow show #t)